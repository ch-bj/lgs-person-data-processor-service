# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: LGS Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        cache: maven
    - name: Get the tag (without leading v)
      id: get_tag
      run: echo "release_tag_version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
    - uses: s4u/maven-settings-action@v3.0.0
      with:
        servers: |
          [{
              "id": "github-lgs-pdp",
              "username": "${{ secrets.GH_PACKAGE_USER }}",
              "password": "${{ secrets.GH_PACKAGE_TOKEN }}"
          }]
    - name: Maven verify
      run: mvn -B verify -Dmaven.test.skip
    - name: Maven run tests
      run: mvn -B test
    - name: Maven set version
      run: mvn -B versions:set -DnewVersion=${{ env.release_tag_version }}
    - name: Maven build package
      run: mvn -B package -Dmaven.test.skip
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lgs-person-data-processor-service-artifacts
        path: |
          target/*.jar
          !target/*-SNAPSHOT.jar
          !target/*-test.jar

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup release package workdir
        run: |
          mkdir -p release
          cp -r README.md COPYRIGHT LICENSE doc docker docker-compose.yml release/
      - name: Download artefact
        uses: actions/download-artifact@v4
        with:
          name: lgs-person-data-processor-service-artifacts
          path: ./release/
      - name: Create release ZIP
        run: |
          cd ./release && zip -r ../lgs-person-data-processor-service.zip * && cd -
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get the tag
        id: get_tag
        run: echo "release_tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
            # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object,
            # which include a `upload_url`.
            # See this blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./lgs-person-data-processor-service.zip
          asset_name: lgs-person-data-processor-service-${{ env.release_tag }}.zip
          asset_content_type: application/zip

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven
      - name: Get the tag
        id: get_tag
        run: echo "release_tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: s4u/maven-settings-action@v3.0.0
        with:
          servers: |
            [{
                "id": "github-lgs-pdp",
                "username": "${{ secrets.GH_PACKAGE_USER }}",
                "password": "${{ secrets.GH_PACKAGE_TOKEN }}"
            }]
      - name: Log in to github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Maven jib:build
        run: |
          mvn -B compile jib:build -Dmaven.skip.test -Djib.container.creationTime=USE_CURRENT_TIMESTAMP -Djib.to.tags=latest,${{env.release_tag}}
